进行静态库的编译：
		1>首先进行静态库代码文件的编写。
				add.c  sub.c
		2>其次进行代码文件的目标编译
				gcc -c -static add.c (-static 选项是可选的)
				gcc -c -static sub.c
		3>将目标文件进行归档生成库（lib库名.a）
				ar -r lib ku.a   add.o  sub.o
		4>程序加载静态库文件，进行可执行文件生成
		//使用静态库编译程序
				同一级目录：使用库的时候库必须放在后面编译否则有问题
						gcc main.c  ku.a -o main
				不同目录下：-l 指名库的名字，-L指名库所在的路径
						gcc main.c   -o main	-lmath  -L./include
__________________________________________________
	ar 归档工具
	nm 静态库查看工具

进行动态库编译：
		1>首先对静态库代码的编写
				add.c sub.c
		2>其次进行代码文件的目标编译
				gcc -c -fpic add.c   (-fpic 选项是可选的)
				gcc -c -fpic sub.c
		3>链接生成动态库
				gcc -shared  add.o sub.o -o libmath.so 
		4>程序加载动态库，链接动态库生成可执行文件文件
				gcc main.c -omain -lmath -L./include 
/*
		执行可执行程序的时候就会查找动态库，其查找规则是：
					/lib
					/usr/lib
				 	或者之际临时设置个查找路径
					export LD_LIBRARY_PATH=./include  临时设置
		第四步是可以生成可执行文件并且没有出错，但是 当可执行文件执行的时候，起就会寻找
*/

=================================================================================
动态库的使用和标准库的使用有什么区别，
	为什么使用标准库的时候要使用头文件引用？

			#include<stdio.h>
				int main(){
					printf("\n");
				}

	而自己写的动态库不需要头文件引用？ 只要能找到动态库的二进制文件就行？
	答：自己写的头文件是要有头文件的，而且要链接动态库。
				example： libpthread.so  头文件为 #include<pthread.h>






















