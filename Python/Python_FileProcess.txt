python 的文件处理

在python中 我们可以把所有文件看成文件对象，对于文件可以使用下面接口获取文件对象。

python标准库中提供的获取文件对象的接口。

	open(name [, mode [,buffering]])  返回值为文件对象。
	
	name 为文件名(带路径)， mode 为打开文件的模式，buffering为表示缓冲区策略选择。
	
	mode 和 buffering 都是为可选参数。
	如果mode参数不选则默认表示只读模式。
	对于buffering参数，有如下解释：
	
	参数buffering是一个可选的参数，用来表示缓冲区的策略选择。设置为0时，表示不使用缓冲区，
直接读写，仅在二进制模式下有效。设置为1时，表示在文本模式下使用行缓冲区方式。设置为大于1时，
表示缓冲区的设置大小。如果参数buffering没有给出，使用默认时，会采用下面策略来选择：

	1）对于二进制文件模式时，采用固定块内存缓冲区方式，内存块的大小根据系统设备的分配的磁盘
块来决定，如果获取系统磁盘块的大小失败，就使用内部常量io.DEFAULT_BUFFER_SIZE定义的大小。
一般的操作系统上，块的大小是4096或者8192字节大小。

	2）对于交互的文本文件（采用isatty()判断为True）时，采用一行缓冲区的方式。其它文本文件使
用跟二进制一样的方式。

	
对于mode打开文件的模式有如下解释：（权限问题）
	
	打开文件的模式分为   'r' 'w' 'a' 只读， 只写，追加。
	'r' 只读模式，其该文件必须存在，否则会报错 "No such file or Directory"
	'w' 只写模式，如果文件不存在则创建文件，如果文件存在则清空文件内容，只支持写入，不支持读取。
	'a' 追加模式  其文件必须存在，追加模式，只有写入，不支持读取。
	当然也可以进行组合方式，用的时候在进行研究。

文件读取的方法：

		文件对象读取的方法：
		read([size]);
		readline([size]);
		readlines([size]);
		
对于read([size])函数，参数凡是带[]的参数都是可选参数，（对于文件指针，读取多少字节，指针九移动多少字节位）
	1. 如果size采取默认值，则表示读取文件的所有内容。
	2. 如果size的值大于文件内容的长度，则表示读取文件所有的内容。
	3. 如果size的值小于文件内容的长度，则表示读取size个字节的值。
	
对于readline([size])函数，参数也是可选的。
	1. 如果size采取默认值，则表示读取文件的所有内容。
		
对于readlines([size])函数。
 

	
文件对象的写入方法：
	write(str);
	writeline(sequence_of_strings);
	
	
	

对于文件对象关闭的讨论：
	close();
	
python的文件属性编码格式

os模块对文件和目录的操作。

xlrd模块对Exexl文件的操作。
	
	
	

	




















	