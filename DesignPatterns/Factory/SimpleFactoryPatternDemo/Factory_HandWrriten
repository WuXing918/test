OCP:Open-Closed Principle开闭原则。OCP关注的是灵活性，改动是通过增加代码进行的，而不是改动现有的代码。对扩展开放，对修改关闭。

工厂模式分为   简单工厂模式，工程模式，抽象工厂模式


简单工厂模式：
	简单工厂模式，分三部分组成：
		1,工厂类（负责创建具体产品，本模式的核心，含有一定的商业逻辑和判断逻辑）
		2,抽象产品类（它一般是具体产品继承的父类或者实现的接口）
		3,具体产品类（工厂类所创建的对象就是此角色的实例）
	使用方法：
		一般工厂类中创建方法都是静态的，所以不需要创建工厂模式类对象，
		根据传入的参数（俗称  输入材料）直接进行调用创建方法进行创建具体产品。

	为什么叫做静态工厂模式？简单工厂类中的方法为什么是静态的？
		下面咱们就来探讨一下 ，其实这样不用静态的在语法上并没有错误，但却完全没理解java面向对象设计的精髓。

		如果直接new出FriutFactory的对象，客户端就必须自己控制工厂类的构造和生成，客户端必须非常清楚工厂的
		构造函数（比如构造函数有多少个参数，输入参数时有什么条件等等），也知道工厂的内部细节，一旦工厂扩展
		或者改变了，客户端在没有得到通知的情况下就不知道怎么调用了。而是用静态方法构造客户端则完全不关心你
		是如何构造对象的所以客户端不需要了解工厂的构造细节，一旦工厂内部发生变化，客户端也不需要关心。它只
		需要关心最后的结果就行了，因为所有的细节都在工厂内部被处理完了。
	缺点：
		1. 他违背了ocp 原则，在添加新的产品以后，对于具体产品这边，它符合ocp原则维持原油代码不动，只是对新的需
		   求进行加代码，但是对于工厂类这边他必须改动现有代码逻辑结构，所以他就违背了ocp 原则
		2. 简单工程类需要知道所有产品的类型，如果产品类过多，或者产品类继承层次过多的话，都会导致工程类的逻辑
	           结构负责，从而不利于维护。


	
